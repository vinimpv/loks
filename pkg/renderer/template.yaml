#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ for comp in data.values.components:
#@ if/end comp.pre_deploy_script:
---
apiVersion: batch/v1
kind: Job
metadata:
  name: #@ "{}-pre-deploy-job".format(comp.name)
  annotations:
    kapp.k14s.io/change-group: #@ "{}.pre-deploy".format(comp.name)
    #@ if comp.dependencies:
    #@ for i, d in enumerate(comp.dependencies):
    #@ for stage in ["post-deploy", "deployments"]:
    #@ key = 'kapp.k14s.io/change-rule.{}-{}'.format(d, stage)
    #@yaml/text-templated-strings
    (@= key @): #@ "upsert after upserting {}.{}".format(d, stage)
    #@ end
    #@ end
    #@ end
spec:
  template:
    spec:
      containers:
      - name: pre-deploy-script
        #@ if comp.skip_image_pull:
        imagePullPolicy: Never
        image: #@ "docker.io/library/{}:dev".format(comp.name)
        #@ else:
        image: #@ comp.image
        #@ end
        command: #@ ["/bin/sh", "-c", comp.pre_deploy_script]
        #@ if comp.env:
        env:
          #@ kvs = struct.decode(comp.env)
          #@ for k in kvs:
          - name: #@ k
            value: #@ kvs[k]
          #@ end
          #@ end
      restartPolicy: OnFailure
#@ for dep in comp.deployments:
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ dep.name
  annotations:
    kapp.k14s.io/change-group: #@ "{}.deployments".format(comp.name)
    #@ if comp.pre_deploy_script:
    kapp.k14s.io/change-rule.pre-deploy: #@ "upsert after upserting {}.pre-deploy".format(comp.name, dep.name)
    #@ end
    #@ if comp.dependencies:
    #@ for i, d in enumerate(comp.dependencies):
    #@ for stage in ["post-deploy", "deployments"]:
    #@ key = 'kapp.k14s.io/change-rule.{}-{}'.format(d, stage)
    #@yaml/text-templated-strings
    (@= key @): #@ "upsert after upserting {}.{}".format(d, stage)
    #@ end
    #@ end
    #@ end
spec:
  replicas: 1
  selector:
    matchLabels:
      app: #@ dep.name
  template:
    metadata:
      labels:
        app: #@ dep.name
    spec:
      containers:
      - name: #@ dep.name
        #@ if comp.image and not comp.skip_image_pull:
        image: #@ comp.image
        #@ else:
        image: #@ "docker.io/library/{}:dev".format(comp.name)
        imagePullPolicy: Never
        #@ end
        #@ if dep.command:
        command: #@ dep.command
        #@ end
        #@ if dep.ports:
        ports:
        #@ for port in dep.ports:
        - containerPort: #@ port.port
        #@ end
        #@ if dep.env or comp.env:
        env:
        #@ if comp.env:
        #@ kvs = struct.decode(comp.env)
        #@ for k in kvs:
        - name: #@ k
          value: #@ kvs[k]
        #@ end
        #@ end
        #@ if dep.env:
        #@ kvs = struct.decode(dep.env)
        #@ for k in kvs:
        - name: #@ k
          value: #@ kvs[k]
        #@ end
        #@ end
        #@ if dep.livenessProbe:
        livenessProbe: #@ dep.livenessProbe
        #@ end
        #@ if dep.mount_path:
        volumeMounts:
        - name: #@ dep.name
          mountPath: #@ dep.mount_path
        #@ end
      #@ if dep.mount_path:
      volumes:
      - name: #@ dep.name
        hostPath:
          path: #@ "/workspace/{}".format(dep.name)
      #@ end
#@ if/end dep.ports:
---
apiVersion: v1
kind: Service
metadata:
  name: #@ dep.name
  annotations:
    kapp.k14s.io/change-group: #@ "{}.deployments".format(comp.name)
    #@ if comp.pre_deploy_script:
    kapp.k14s.io/change-rule.pre-deploy: #@ "upsert after upserting {}.pre-deploy".format(comp.name)
    #@ end
    #@ if comp.dependencies:
    #@ for i, d in enumerate(comp.dependencies):
    #@ for stage in ["post-deploy", "deployments"]:
    #@ key = 'kapp.k14s.io/change-rule.{}-{}'.format(d, stage)
    #@yaml/text-templated-strings
    (@= key @): #@ "upsert after upserting {}.{}".format(d, stage)
    #@ end
    #@ end
    #@ end
spec:
  selector:
    app: #@ dep.name
  ports:
  #@ for port in dep.ports:
  - protocol: TCP
    port: #@ port.hostPort or port.port
    targetPort: #@ port.port
  #@ if port.hostPort:
  type: NodePort
  #@ else:
  type: ClusterIP
  #@ end
  #@ end
  #@ end
#@ end
#@ end
#@ if comp.post_deploy_script:
---
apiVersion: batch/v1
kind: Job
metadata:
  name: #@ "{}-post-deploy-job".format(comp.name)
  annotations:
    kapp.k14s.io/change-group: #@ "{}.post-deploy".format(comp.name)
    kapp.k14s.io/change-rule.after-deployments: #@ "upsert after upserting {}.deployments".format(comp.name)
spec:
  template:
    spec:
      containers:
      - name: post-deploy-script
        #@ if comp.skip_image_pull:
        imagePullPolicy: Never
        image: #@ "docker.io/library/{}:dev".format(comp.name)
        #@ else:
        image: #@ comp.image
        #@ end
        command: #@ ["/bin/sh", "-c", comp.post_deploy_script]
        #@ if comp.env:
        env:
          #@ kvs = struct.decode(comp.env)
          #@ for k in kvs:
          - name: #@ k
            value: #@ kvs[k]
          #@ end
          #@ end
      restartPolicy: OnFailure
#@ end
#@ end
